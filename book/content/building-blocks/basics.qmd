# Basics

```{r}
#| include: false

source(here::here("resources/scripts/content/source-all.R"))
```

## Objects

In Python everything is an **object** stored on RAM (random access memory), and is looked up using object reference that is a memory address on RAM.

Objects are fundamental to **object oriented programming**, which will be covered in the OOP section.

Object stores information in attributes which are of 2 fundamental forms.

- data attributes
- operations

To understand the idea think of an object as ***object = data + operation*** where,

- **data = noun** and **operation = verb**
- **data = state** and **operation = behavior**

For example, consider an integer "text" stored as an object in Python. It has data type attributes like value which is the "text" and numerous operations like capitalize which returns another string "Text". The actual implementation has more details, this is simplification of the general concept.

Data attributes are responsible for storing the information that defines the state of an object.

Every object has special data attribute which defines what type of object it is. In Python it is `__class__`.

Operations are other type of attribute, which provide functionality. They are functions with some additional features and are often referred to as methods.

### dot operator

Dot operator `.`gives access to object's attributes, data and operations.

```{python}
num_1 = 1.5
```

```{python}
num_1.as_integer_ratio()
```

## Variables

### Introduction to variables

Variables are named references that provide a handle to the object. They are stored separately on RAM in a separate table called namespace.

Namespaces are mapping between variable names and reference to objects which can be used to lookup memory address of the object.

Note that memory address is not constant, the language interpreter stores created objects at available memory address and deletes them when not needed. On many occasions the memory address will change, e.g. re running a program. That is where variables and namespaces come in.

Variables provide handle to objects for

- reuse and passing around objects
- performing operations

In Python, variable are defined using the `=` operator.

When a variable is defined for example

```python
some_var = "some text"
```

- a string type object `"some text"` is created in RAM which has `some_id`
- `some_var` variable name is bound to `"some text"` object created
    - this is referred to as **name binding**
- variable name `some_var` and memory address of object `"some text"` are stored in a namespace

Below figure illustrates the relationship between a variable name and object.

::: {.column-body}
![](../../../resources/diagrams/data-types/var-obj-namespace.png)
:::

Once the language interpreter sees what type of object it is, it knows what is the structure of data and operations stored in the object. Hence, the associated variable name has access to the attributes.

### Deciding variable names

#### Must-follow

- **case sensitive**
- **start** with `_` or `letter` (a-z A-Z)
- **followed by** any number of `_`, letters or digits
- **cannot** be one of **reserved words**

Below code can be used to check keyword list in Python.

```python
import keyword
print(keyword.kwlist)
```

```{r}
#| echo: false
#| output: asis
#| cache: false

library('reticulate')
kwp  <- reticulate::import('keyword')
kws <- kwp$kwlist
kws <- paste0("`", kws, "`")
l_kws = length(kws)
breaks <- seq.int(1, length(kws), 7)
cns <- paste0("x_", 1:7)
df <- setNames(data.frame(matrix(ncol = 7, nrow = 5)), cns) |>
  tibble::tibble()
for (i in 1:5) {
  for (j in 1:7) {
    df[i, j] <- kws[breaks[i] + j - 1]
  }
}
caption <- paste0("Python keywords (", l_kws, ")")
col_names <- rep("", ncol(df))
package <- "hux" # hux, pander, kable

create_table(df, caption = caption, package = package, col_names = col_names) |>
    huxtable::theme_grey() |> 
    print_tbl_out(package = package)
```


#### Should-follow

- `_my_var`: names starting with single underscore

  - used for `private` or `internal` objects
  - not exported by `from module import *`

- **avoid using names with dunder**
    - `__my_var`: names starting with double underscore
        - used to *mangle* class attributes in class chains
    - `__my_var__`: names starting and ending in double underscore
        - system defined names used in class internal attributes

#### PEP-8 Conventions

[**PEP**](https://peps.python.org/pep-0000/#) refers to Python enhancement proposals which have detailed documentation about the rationale and description of changes to Python language specifications.

[**PEP-8**](https://peps.python.org/pep-0008/) is related to Python code styles and is highly recommended read. Below are the conventions suggested for variable names. These will be used all through the course with few exceptions.

Following these conventions makes the code readability and understanding the code easy for both the writer and users.

```{r}
#| output: asis
#| cache: false
#| echo: false
#| cache: false

tables_file_path <- "resources/tables/pybcb-tables.xlsx"
sheet <- "pep-8-conventions"
package <- "pander" # hux, pander, kable

df <- readxl::read_excel(here::here(tables_file_path), sheet=sheet)

tbl <- create_table(df, package = package)

print_tbl_out(tbl, package)
```

### Python features

#### Dynamic type

In Python, variable type do not need to be declared and same variable can be bound to different type of objects.

This is leads to terms like Python is a dynamically typed language.

Opposite to **dynamic type** is **strict type**, e.g. `C`, where once a variable is declared to point to string objects it can only store string objects.

```{python}
some_var = 10
some_var = "some text string"
```

```{python}
print(f'{some_var=}')
```

Variable type can be declared for assistance and code readability, but does not enforce the type, which means it can be bound to other object type.

It is not recommended to declare type and then use different type of object.

[PEP-487](https://peps.python.org/pep-0483/) has more detailed discussion around this.

```{python}
some_var:str = "some text string"
some_var:int = 10
```

```{python}
print(f'{some_var=}')
```

#### Multiple assignment

To exchange values of a set of variables you do not need temporary assignments. Below examples illustrates this.


```{python}
a = 10; b = "some text"; c = ["this", "is", "a", "list"]
```

```{python}
print(f'{a=}, {b=}, {c=}')
```

```{python}
a, b, c = c, a, b
```

```{python}
print(f'{a=}, {b=}, {c=}')
```

## Commonly used syntax

### Comments (`#`)

Comments are text within code which is not evaluated and is used for documentation and code readability.

There are 2 basic rules related to comments.

- python ignores and does not parse/evaluate the line content after `#`

- cannot use `#` just after assignment operator `=`

#### Examples
##### Example 1

Below is simple usage to document the code.

```python
# Enter the value of inputs below
x = 10
y = 20

# Calculate sum
z = x + y
```

##### Example 2

In the example below, variable `num_in_comment` gives an error while trying to print on line 2 because line 1 is commented and not evaluated, therefore there is no variable `num_in_comment` in namespace.

```{python}
#| error: true
# num_in_comment = 10
print(num_in_comment)
```

##### Example 3

Below example illustrates incorrect usage of `#` after `=`.

```{python}
#| error: true
some_num = # value on next line
10
print(some_num)
```

### Newline

- New lines can be introduced in multiple ways
    - explicit method
        - break lines using `\`
        - join lines using `;`
    - implicit method: Expressions within `()`, `[]`, `{}`
        - can be broken into multiple lines
        - can contain comments
        - can have trailing commas
- New line syntax can be used to enhance code readability

#### Explicit method example

```python
some_var_1 = 10
some_var_2 = 20
some_var_3 = 30
some_var_4 = 40
if some_var_1 > 5 and some_var_2 > 10 and some_var_3 > 20 and some_var_4 > 30:
    print('yes')
```

When the code becomes too long to fit or is too short it is useful to use explicit method to join or break lines to improve code organization and readability.

```python
some_var_1 = 10; some_var_2 = 20
some_var_3 = 30; some_var_4 = 40

if some_var_1 > 5 and some_var_2 > 10 \
    and some_var_3 > 20 and some_var_4 > 30:
    print('yes')
```

#### Implicit method example

Expressions in `()`, `[]` or `{}` can be split into multiple lines without needing explicit use of backslash (`\`). Optionally they can contain comments.

*Note that trailing commas are allowed, illustrated in second example.*

::: {layout-ncol="2"}

```python
a = (
    "item 1",
    "item 2",
    "item 3"
)
```

```python
a = [
    1, # first item
    2, # second item
    3, # third item
    ]
```
:::

### Blocks (indentation)

Python uses indentation to isolate distinct blocks, like control flow blocks (`if`, `while`), functions (`def`), classes (`class`). This improves code readability.

Indentation can be made using special `tab` characters or `spaces`. It is recommended to use 4 spaces and is generally a good choice. Below is an example, to illustrate how indentation improves code readability.

```python
import math
def calc_circle_area(r=1, pi=math.pi):
    if r < 0:
        print("radius should be >= 0")
    else:
        return pi*(r**2)
```

Editors allow you to choose the method and amount of indentation to use. So in VSCode it is recommended to set it to 4 spaces. "Editor: Tab Size" is the relevant setting which is documented at [link](https://code.visualstudio.com/docs/editor/codebasics#_indentation).

## Functions

This section provides introduction to some basic functions which will be used to explain some underlying concepts in topics that follow.

Focus on 

- understanding at a high level what the function does
- getting used to executing small pieces of code (in jupyter notebooks)
- using variable assignment

Ignore the details of `f''` string formats for now, they are there for formatting output. They will be covered later in data types section under string operations.

### type

- `type(_obj)`: returns object type

```{python}
var_1 = 10
var_2 = 10.0
var_3 = "string"
```

```{python}
type(var_1), type(var_2), type(var_3), type(10.2)
```

### id

- `id(_obj)`: returns object memory reference id
  - `hex(_integer)` converts to hexadecimal for better readability

```{python}
_string_1 = "some text"
```

```{python}
id(_string_1), hex(id(_string_1))
```

### is

`a is b`: check if `a` and `b` refer to same object

This means checking if the memory address of the given variables or objects is same.

In the example below a list object `[10]` is created and both `a` and `b` are bound to the same object. Therefore `a is b` returns true.

```{python}
a = b = [10]
```

```{python}
print(f'{a is b = }\n{hex(id(a))=}\n{hex(id(b))=}')
```

In the example below a list object `[10]` is created and variable `a` is bound to that object. Then variable `b` is bound to the object that `a` is bound to.

```{python}
a = [10]
b = a
```

```{python}
print(f'{a is b = }\n{hex(id(a))=}\n{hex(id(b))=}')
```

Since `[10]` is a list type object, even though `c` and `d` assignments look the same, they point to different objects.

```{python}
c = [10]
d = [10]
```

```{python}
print(f'{c is d = }\n{hex(id(c))=}\n{hex(id(d))=}')
```

Above examples illustrate subtle points about variable and object bindings which lead to a lot of implications while using mutable and immutable objects. This is covered in more detail in next section on data types and rest of the book.

## Modules and `import`

Modules in Python refer to different things, based on context.

- a file with `.py` extension containing Python code
- an object once a `.py` file or package is imported using `import` statement

Packages are special type of modules, a folder containing Python files.

One of the important use-case of these specifications is to use external code. Python standard library has a lot of built in functionality for various use cases. The modules and packages contained in the standard library can be imported and used as required.

Import system in Python provides ways of managing objects in code and files. This is introduced here for basic usage in examples. All this is covered in detail in Architecture part.

In the example below,

- `math` module is imported using `import` statement
- objects: definitions are accessed using dot operator

```{python}
import math

print(math.pi)
print(math.ceil(10.2))
```

## Executing Python files

There are 2 main ways to execute a Python (`.py`) file using command line.

- `<path to python executable> <path to file>`
    - can take relative path
    - for a regular package
        - only `__main__.py` is executed if package name is used
        - `__main__.py` or `__init__.py` can be given explicitly
- `<path to python executable> -m <file name without extension>`
    - cannot take relative paths
    - command has to be executed from the directory containing the file
    - if the file is in a directory below the shell directory then dot notation can be used
        - e.g. `python3 -m sub_dir.file_1`
    - in case of a regular package, `__init.py` and `__main__.py` both are executed

Since using the first approach, a Python file can be executed from any directory it is the preferred approach.

### Executing one script from another

The recommended approach for executing one script from another is to keep the files in same folder and then use `import`.

For example, `file_1.py` has to execute `file_2.py`. Place `file_2.py` in same folder as `file_1` then use `import file_2` in `file_1.py`. Whenever `file_1.py` is executed it will execute `file_2.py`.