---
title: "Available Modules & Packages"
---

```{r}
#| include: false
source(here::here("resources/scripts/content/source-all.R"))
```

# Introduction

- Modules and packages allow code re-use and distribution

- There are several modules and packages available
    - provide definitions (functions, constants, classes) for a variety of use cases

- There are 3 main resources for using external modules and packages for use in Python code.
    - Built-in
    - Python standard library
    - PyPI: Python package index

# Built-in

- These are built-in objects that are always available
- They are loaded by default
    - do not need the use of `import`
- Categories
    - [built-in **functions**](https://docs.python.org/3/library/functions.html)
    - [built-in **constants**](https://docs.python.org/3/library/constants.html)
    - [built-in **types**](https://docs.python.org/3/library/stdtypes.html)
    - [built-in **Exceptions**](https://docs.python.org/3/library/exceptions.html)

# Standard library {#sec-std-lib}

- Large collection of modules and packages provided by Python
- These have to be loaded using `import`
    - not loaded by default like the built-in objects
- Some of these, like `math` and `sys`, are written in `C` for speed
- [Library reference](https://docs.python.org/3/library/index.html)

## Frequently used modules

```{r}
#| echo: false
#| output: asis
#| cache: false

table_file_path <- "resources/tables/pybcb-tables.xlsx"
sheet <- "std-library" # name or number
package <- "hux" # hux, pander, kable

tbl_df <- readxl::read_excel(here::here(table_file_path), sheet=sheet)
tbl_df <- tbl_df[tbl_df$include == TRUE, ][1:3]

tbl <- create_table(tbl_df, package = package, apply_theme = TRUE) |>
    huxtable::merge_repeated_rows(col = c(1)) |>
    huxtable::set_col_width(value = c(.4, .1, .5)) |>
    huxtable::set_bold(col = c(1), value = TRUE) |>
    huxtable::set_text_color(row = -1, col = c(2), value = "purple") |>
    huxtable::set_bottom_border(TRUE) |>
    huxtable::set_markdown(row = 1, value = FALSE)
```

### {.fragile .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1:5),], package)
```

### {.fragile .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1, 6:9),], package)
```

### {.fragile .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1, 10:15),], package)
```

### {.fragile .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1, 16:20),], package)
```

# Python package index (PyPI)

- [`PyPI`](https://pypi.org/) handles open source contributions to the language
- External packages which have to be installed before they can be loaded using`import`
- [`pip`](https://pip.pypa.io/en/stable/) is the installer for external packages on `PyPI`

## Some important packages

```{r}
#| echo: false
#| output: asis
#| cache: false

table_file_path <- "resources/tables/pybcb-tables.xlsx"
sheet <- "ext-library" # name or number
package <- "hux" # hux, pander, kable

tbl_df <- readxl::read_excel(here::here(table_file_path), sheet=sheet)

tbl <- create_table(tbl_df, package = package, apply_theme = TRUE) |>
    huxtable::merge_repeated_rows(col = c(1)) |>
    huxtable::set_valign(col = 1, value = "top") |>
    huxtable::set_col_width(value = c(.4, .1, .5)) |>
    huxtable::set_bold(col = c(1), value = TRUE) |>
    huxtable::set_col_width(value = c(.3, .3, .4))
```

### {.fragile .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1, 2, 3, 6),], package)
```

### {.fragile .shrink .smaller}

```{r}
#| echo: false
#| output: asis
#| cache: false

print_tbl_out(tbl[c(1, 4, 5, 7, 8),], package)
```

# Virtual Environments

## Introduction

- Keep installation of external packages organized for different tasks
- Keep track and manage version requirements for external packages needed for specific projects
- [Python docs: venv](https://docs.python.org/3/library/venv.html)

## Why use a virtual env?

- The external packages keep releasing new versions for bug fixes, enhancements and new features

- Latest version might no longer support a feature that the project code needed

- Conflict between dependencies of different project's

- Some projects might need a specific version of Python itself

- There might be some packages which are needed for one time tasks

## Usage

### How to create a virtual environment?

- `venv` module is part of standard library and can be used with bash commands
- Linux/Mac: `python3 -m venv <path to new venv>`
- Windows: `py [-v] venv <path to new venv>`
- It is recommended to use Python version in bash commands, while creating and restoring `venv`

### How to activate `venv` using bash?

- Linux/Mac:
    - `source <venv path>/bin/activate`
- Windows:
    - `source <venv path>/Scripts/activate`
- Editors, like VSCode, allow to select Python interpreter for running a project
    - `venv` can be set to be activated by default

## Project dependencies {.smaller}

- `venv` along with `pip` can be used to manage project dependencies

- `venv` keeps installed packages isolated in a virtual environment

- `pip` is used to create a list of required external modules installed in `venv`
    - windows: `py [-v] -m pip freeze > py-requirements.txt`
    - unix/mac: `python3 -m pip freeze > py-requirements.txt`
    - version dependencies can be managed as well

- `pip` is used to re-create `venv` by installing required external modules contained in `<py-requirements.txt>` file in `venv`
    - windows: `py [-v] -m pip install -r py-requirements.txt`
    - unix/mac: `python3 -m pip install -r py-requirements.txt`

- Resources: [pip user guide](https://pip.pypa.io/en/stable/user_guide/)

## Structuring `venv`'s

### Options {.smaller}

- **Centralized approach**: keep all virtual environments in a central location
    - related projects can share virtual environments
    - typically location is `$HOME/.venvs/<name of venv>`
- **De-centralized approach**: each project has its own virtual environment
    - simple but effective as there is no need to manage conflicts
    - similar projects can be grouped in a root directory with a common `venv` if needed

> Given the amount of memory used by virtual environments and simplicity of management, de-centralized approach makes more sense unless there is a specific reason.

### Example {.smaller}

- project root
    - **.git/**
    - **.py-venv/**
    - **docs/**
    - `main.py`
    - `inputs.py`
    - `category_1_funcs.py`
    - `category_2_funcs.py`
    - `py-requirements.txt`
    - `.gitignore`
